import random
import math

def count_conflicts(state):
    conflicts = 0
    n = len(state)
    for i in range(n):
        for j in range(i + 1, n):
            if state[i] == state[j]:
                conflicts += 1  # Same column (vertical conflict)
            if abs(state[i] - state[j]) == abs(i - j):
                conflicts += 1  # Diagonal conflict
    return conflicts

def generate_neighbors(state):
    neighbors = []
    n = len(state)
    for i in range(n):
        for j in range(i + 1, n):
            neighbor = state[:]
            neighbor[i], neighbor[j] = neighbor[j], neighbor[i]  # Swap positions of queens i and j
            neighbors.append(neighbor)
    return neighbors

def acceptance_probability(old_cost, new_cost, temperature):
    if new_cost < old_cost:
        return 1.0  # Always accept if the new state is better
    return math.exp((old_cost - new_cost) / temperature)

def simulated_annealing(n, initial_state, initial_temp, cooling_rate, max_iterations):
    state = initial_state
    current_cost = count_conflicts(state)
    temperature = initial_temp

    for iteration in range(max_iterations):
        neighbors = generate_neighbors(state)
        random_neighbor = random.choice(neighbors)
        new_cost = count_conflicts(random_neighbor)

        if acceptance_probability(current_cost, new_cost, temperature) > random.random():
            state = random_neighbor
            current_cost = new_cost

        temperature *= cooling_rate  # Reduce the temperature

        if current_cost == 0:
            return state  # Solution found with no conflicts

    return None  # No solution found within the given iterations

def get_user_input(n):
    while True:
        try:
            user_input = input(f"Enter the column positions for the queens (space-separated integers between 0 and {n-1}): ")
            initial_state = list(map(int, user_input.split()))
            if len(initial_state) != n or any(x < 0 or x >= n for x in initial_state):
                print(f"Invalid input. Please enter exactly {n} integers between 0 and {n-1}.")
                continue
            return initial_state
        except ValueError:
            print(f"Invalid input. Please enter a list of {n} integers.")

n = 8
initial_state = get_user_input(n)

# Parameters for simulated annealing
initial_temp = 1000  # Initial temperature
cooling_rate = 0.99  # Cooling rate
max_iterations = 10000  # Maximum number of iterations

# Run simulated annealing to find the solution
solution = simulated_annealing(n, initial_state, initial_temp, cooling_rate, max_iterations)

# Output the solution
if solution:
    print("Solution found!")
    # Printing the board
    for row in range(n):
        board = ['Q' if col == solution[row] else '.' for col in range(n)]
        print(' '.join(board))
else:
    print("No solution found within the given iterations.")
print('Vatsal - 1BM22CS323')
