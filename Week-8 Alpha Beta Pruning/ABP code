def alpha_beta_pruning(node, depth, alpha, beta, maximizing_player): 
if depth == 0 or isinstance(node, int):
 return node 
if maximizing_player:
 max_eval = float('-inf') 
for child in node:
 eval = alpha_beta_pruning(child, depth - 1, alpha, beta, False) 
max_eval = max(max_eval, eval)
 alpha = max(alpha, eval) 
if beta <= alpha:
 break 
return max_eval
 32 
else:
 min_eval = float('inf') 
for child in node:
 eval = alpha_beta_pruning(child, depth - 1, alpha, beta, True) 
min_eval = min(min_eval, eval)
 beta = min(beta, eval) 
if beta <= alpha:
 break 
return min_eval
 # Proper tree structure for alpha-beta pruning 
tree = [
 [[3, 5, 6], [9, 1, 2], [0, 7, 4]],
 ]
 print("Optimal Value:", alpha_beta_pruning(tree, 3, float('-inf'), float('inf'), True)) 
print(“Vatsal – 1BM22CS323”)
